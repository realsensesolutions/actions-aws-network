name: Actions AWS Network Setup
description: 'Search or Create AWS VPC and network infrastructure'

inputs:
  action:
    description: 'Action to perform: plan, apply, or destroy'
    required: false
    default: 'apply'
  force-apply:
    description: 'Force terraform apply even if resources already exist'
    required: false
    default: 'false'
  lock-timeout:
    description: 'Time to wait for a state lock to be released'
    required: false
    default: '5m'

outputs:
  vpc_id:
    description: "VPC ID"
    value: ${{ steps.provision-vpc.outputs.vpc_id }}
  subnet_public_id:
    description: "First public subnet ID (backward compatibility)"
    value: ${{ steps.provision-subnets.outputs.subnet_public_id }}
  subnet_private_id:
    description: "First private subnet ID (backward compatibility)"
    value: ${{ steps.provision-subnets.outputs.subnet_private_id }}
  subnet_public_ids:
    description: "All public subnet IDs (comma-separated)"
    value: ${{ steps.provision-subnets.outputs.subnet_public_ids }}
  subnet_private_ids:
    description: "All private subnet IDs (comma-separated)"
    value: ${{ steps.provision-subnets.outputs.subnet_private_ids }}
  nat_gateway_id:
    description: "NAT Gateway ID"
    value: ${{ steps.provision-nat.outputs.nat_gateway_id }}
  egress_only_gateway_id:
    description: "Egress-Only Internet Gateway ID"
    value: ${{ steps.provision-gateways.outputs.egress_only_gateway_id }}
  vpc_ipv6_cidr_block:
    description: "VPC IPv6 CIDR block"
    value: ${{ steps.provision-vpc.outputs.vpc_ipv6_cidr_block }}
  sg_public_id:
    description: "Public Security Group ID"
    value: ${{ steps.provision-security-groups.outputs.sg_public_id }}
  sg_private_id:
    description: "Private Security Group ID"
    value: ${{ steps.provision-security-groups.outputs.sg_private_id }}

runs:
  using: "composite"
  steps:
    - name: Terraform init for apply/plan
      shell: bash
      if: ${{ inputs.action != 'destroy' }}
      working-directory: ${{ github.action_path }}
      env:
        TF_BACKEND_key: "actions-aws-network/${{ env.TF_VAR_instance }}"
      run: |
        terraform init -reconfigure \
          -lock-timeout=${{ inputs.lock-timeout }} \
          -backend-config="bucket=$TF_BACKEND_s3" \
          -backend-config="dynamodb_table=$TF_BACKEND_dynamodb" \
          -backend-config="key=$TF_BACKEND_key"
    - name: Terraform init for destroy
      shell: bash
      if: ${{ inputs.action == 'destroy' }}
      working-directory: ${{ github.action_path }}
      env:
        TF_BACKEND_key: "actions-aws-network/${{ env.TF_VAR_instance }}"
      run: |
        terraform init -reconfigure \
          -lock-timeout=${{ inputs.lock-timeout }} \
          -backend-config="bucket=$TF_BACKEND_s3" \
          -backend-config="dynamodb_table=$TF_BACKEND_dynamodb" \
          -backend-config="key=$TF_BACKEND_key"
    - name: terraform plan
      shell: bash
      if: ${{ inputs.action == 'plan' }}
      working-directory: ${{ github.action_path }}
      run: |
        terraform plan -lock-timeout=${{ inputs.lock-timeout }}
    - name: terraform apply
      shell: bash
      if: ${{ inputs.action == 'apply' }}
      working-directory: ${{ github.action_path }}
      run: |
        terraform apply -auto-approve -lock-timeout=${{ inputs.lock-timeout }}
    - name: terraform destroy
      shell: bash
      if: ${{ inputs.action == 'destroy' }}
      working-directory: ${{ github.action_path }}
      run: |
        terraform destroy -auto-approve
    - name: set tf vpc
      working-directory: ${{ github.action_path }}
      shell: bash
      id: provision-vpc
      if: ${{ inputs.action == 'apply' }}
      run: |
        VPC_ID=$(terraform output -raw vpc_id)
        VPC_IPV6_CIDR=$(terraform output -raw vpc_ipv6_cidr_block)
        echo "TF_VAR_vpc_id=$VPC_ID" >> $GITHUB_ENV
        echo "TF_VAR_vpc_ipv6_cidr_block=$VPC_IPV6_CIDR" >> $GITHUB_ENV
        echo "vpc_id=$VPC_ID" >> $GITHUB_OUTPUT
        echo "vpc_ipv6_cidr_block=$VPC_IPV6_CIDR" >> $GITHUB_OUTPUT
    - name: set tf subnets
      working-directory: ${{ github.action_path }}
      shell: bash
      id: provision-subnets
      if: ${{ inputs.action == 'apply' }}
      run: |
        SUBNET_PUBLIC_ID=$(terraform output -raw subnet_public_id)
        SUBNET_PRIVATE_ID=$(terraform output -raw subnet_private_id)
        SUBNET_PUBLIC_IDS=$(terraform output -raw subnet_public_ids)
        SUBNET_PRIVATE_IDS=$(terraform output -raw subnet_private_ids)

        # Export both singular and plural environment variables
        echo "TF_VAR_subnet_public_id=$SUBNET_PUBLIC_ID" >> $GITHUB_ENV
        echo "TF_VAR_subnet_private_id=$SUBNET_PRIVATE_ID" >> $GITHUB_ENV
        echo "TF_VAR_subnet_public_ids=$SUBNET_PUBLIC_IDS" >> $GITHUB_ENV
        echo "TF_VAR_subnet_private_ids=$SUBNET_PRIVATE_IDS" >> $GITHUB_ENV

        # Export both singular and plural outputs
        echo "subnet_public_id=$SUBNET_PUBLIC_ID" >> $GITHUB_OUTPUT
        echo "subnet_private_id=$SUBNET_PRIVATE_ID" >> $GITHUB_OUTPUT
        echo "subnet_public_ids=$SUBNET_PUBLIC_IDS" >> $GITHUB_OUTPUT
        echo "subnet_private_ids=$SUBNET_PRIVATE_IDS" >> $GITHUB_OUTPUT
    - name: set tf nat gateway
      working-directory: ${{ github.action_path }}
      shell: bash
      id: provision-nat
      if: ${{ inputs.action == 'apply' }}
      run: |
        NAT_GATEWAY_ID=$(terraform output -raw nat_gateway_id || echo "")
        if [ -n "$NAT_GATEWAY_ID" ]; then
          echo "TF_VAR_nat_gateway_id=$NAT_GATEWAY_ID" >> $GITHUB_ENV
          echo "nat_gateway_id=$NAT_GATEWAY_ID" >> $GITHUB_OUTPUT
        else
          echo "TF_VAR_nat_gateway_id=" >> $GITHUB_ENV
          echo "nat_gateway_id=" >> $GITHUB_OUTPUT
        fi
    - name: set tf gateways
      working-directory: ${{ github.action_path }}
      shell: bash
      id: provision-gateways
      if: ${{ inputs.action == 'apply' }}
      run: |
        EOIGW_ID=$(terraform output -raw egress_only_gateway_id)
        echo "TF_VAR_egress_only_gateway_id=$EOIGW_ID" >> $GITHUB_ENV
        echo "egress_only_gateway_id=$EOIGW_ID" >> $GITHUB_OUTPUT
    - name: set tf security groups
      working-directory: ${{ github.action_path }}
      shell: bash
      id: provision-security-groups
      if: ${{ inputs.action == 'apply' }}
      run: |
        SG_PUBLIC_ID=$(terraform output -raw sg_public_id)
        SG_PRIVATE_ID=$(terraform output -raw sg_private_id)
        echo "TF_VAR_sg_public_id=$SG_PUBLIC_ID" >> $GITHUB_ENV
        echo "TF_VAR_sg_private_id=$SG_PRIVATE_ID" >> $GITHUB_ENV
        echo "sg_public_id=$SG_PUBLIC_ID" >> $GITHUB_OUTPUT
        echo "sg_private_id=$SG_PRIVATE_ID" >> $GITHUB_OUTPUT

